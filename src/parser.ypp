%{
    #include <iostream>
    #include "output.hpp"

    extern int yylex();
    extern int yylineno;
    void yyerror(const char *s);
    
    using namespace output;
%}

%token TYPE
%token ID
%token SC
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE 
%token CALL
%token INT
%token BYTE
%token BOOL
%token NUM
%token B
%token STRING
%token TRUE
%token FALSE

%right ASSIGN
%left OR
%left AND
%left EQUALITYOP
%left RELATIONALOP
%left PLUS MINUS
%left MULT DIV
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE // It seems that with `%nonassoc` it works as well...


%%
Program:
    Statements { printProductionRule(1); }
    ;

Statements:
    Statement { printProductionRule(2); }
    | Statements Statement { printProductionRule(3); }
    ;

Statement:
    LBRACE Statements RBRACE { printProductionRule(4); }
    | Type ID SC { printProductionRule(5); }
    | Type ID ASSIGN Exp SC { printProductionRule(6); }
    | ID ASSIGN Exp SC { printProductionRule(7); }
    | Call SC { printProductionRule(8); }
    | RETURN SC { printProductionRule(9); }
    | IF LPAREN Exp RPAREN Statement { printProductionRule(10); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement { printProductionRule(11); }
    | WHILE LPAREN Exp RPAREN Statement { printProductionRule(12); }
    | BREAK SC { printProductionRule(13); }
    | CONTINUE SC { printProductionRule(14); }
    ;

Call:
    ID LPAREN Exp RPAREN { printProductionRule(15); }
    ;

Type:
    INT { printProductionRule(16); }
    | BYTE { printProductionRule(17); }
    | BOOL { printProductionRule(18); }
    ;

Exp:
    LPAREN Exp RPAREN { printProductionRule(19); }
    | Exp PLUS Exp { printProductionRule(20); }
    | Exp MINUS Exp { printProductionRule(20); }
    | Exp MULT Exp { printProductionRule(20); }
    | Exp DIV Exp { printProductionRule(20); }
    | ID { printProductionRule(21); }
    | Call { printProductionRule(22); }
    | NUM { printProductionRule(23); }
    | NUM B { printProductionRule(24); }
    | STRING { printProductionRule(25); }
    | TRUE { printProductionRule(26); }
    | FALSE { printProductionRule(27); }
    | NOT Exp { printProductionRule(28); }
    | Exp AND Exp { printProductionRule(29); }
    | Exp OR Exp { printProductionRule(30); }
    | Exp EQUALITYOP Exp { printProductionRule(31); }
    | Exp RELATIONALOP Exp { printProductionRule(31); }
    | LPAREN Type RPAREN Exp { printProductionRule(32); }
    ;
%%

void yyerror(const char *s)
{
    errorSyn(yylineno);
    exit(0);
}

int main()
{
    return yyparse();
}